#pragma once

#include "../header/messageTable.h"

namespace GMT
{
	const std::map<int, std::string> MessageTable::messageMap = {
		{11001, "OK"},
		{11002, "INPUT_ILLEGAL"},

		{12001, "TRAJCTORY_NORMAL_END"},
		{12002, "K_OUT_OF_RANGE"},
		{12003, "NOT_INITIALED"},
		{12004, "TRAJCTORY_N_IS_NAN"},
		{12005, "SPIRAL_OPTION_TYPE_UNKNOW"},
		{12006, "SPIRAL_P_OUT_OF_SCAN_RANGE"},

		{13001, "TRAJCTORY_START_OUT_OF_RANGE "},
		{13002, "TRAJCTORY_END_OUT_OF_RANGE "},
		{13003, "TRAJCTORY_EMPTY "},
		{13004, "N_IK_FAIL_POSE_CANT_BE_REACHED "},
		{13005, "TRAJCTORY_P_OUT_OF_MACHINE_WORKING_RANGE "},
		{13006, "TRAJCTORY_SPIRAL_END "},
		{13007, "STAGE_ERROR "},
		{13008, "STEWART_TYPE_ERROR "},
		{13009, "SCAN_OUT_OF_RANGE "},
		{13010, "STEP_OUT_OF_RANGE "},
		{13011, "SIN_OUT_OF_RANGE "},
		{13012, "WS_SCAN_FAIL "},

		{14001,"SPIRAL_STAGE_START_SPIRAL"},
		{14002,"SPIRAL_STAGE_SPIRAL_END_BACK_TO_START"},
		{14003,"SIN_STAGE_START_TO_SIN"},
		{14004,"SIN_STAGE_SIN"},
		{14005,"SIN_STAGE_SIN_END_TO_START"},

		{15001, "FA_MAX_FOUND"},
		{15002, "FA_BETWEEN_THD0_THD1"},
		{15003, "FA_BELOW_THD0"},
		{15004, "FA_SET_THRESHOLD"},
		{15005, "FA_LIGHT_SOURCE_ERROR"},
		{15006, "FA_LIGHT_SOURCE_NONUSE"},
	};
}
