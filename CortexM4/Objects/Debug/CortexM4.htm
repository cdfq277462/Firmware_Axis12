<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Debug\CortexM4.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Debug\CortexM4.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Fri Aug 19 16:14:50 2022
<BR><P>
<H3>Maximum Stack Usage =        760 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
app_sock_task &rArr; tcp_sock_send &rArr; netTCP_Send &rArr; net_tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[117]">__user_initial_stackheap</a>
 <LI><a href="#[6]">SVC_Handler</a>
 <LI><a href="#[8]">PendSV_Handler</a>
 <LI><a href="#[9]">SysTick_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[85]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[85]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[22b]">osRtxThreadListRoot</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22b]">osRtxThreadListRoot</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[85]">ADC3_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[9d]">ADC_DMAConvCplt</a> from stm32h7xx_hal_adc.o(.text.ADC_DMAConvCplt) referenced 2 times from stm32h7xx_hal_adc.o(.text.HAL_ADC_Start_DMA)
 <LI><a href="#[9f]">ADC_DMAError</a> from stm32h7xx_hal_adc.o(.text.ADC_DMAError) referenced 2 times from stm32h7xx_hal_adc.o(.text.HAL_ADC_Start_DMA)
 <LI><a href="#[9e]">ADC_DMAHalfConvCplt</a> from stm32h7xx_hal_adc.o(.text.ADC_DMAHalfConvCplt) referenced 2 times from stm32h7xx_hal_adc.o(.text.HAL_ADC_Start_DMA)
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[87]">BDMA_Channel0_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[88]">BDMA_Channel1_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[89]">BDMA_Channel2_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[8a]">BDMA_Channel3_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[8b]">BDMA_Channel4_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[8c]">BDMA_Channel5_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[8d]">BDMA_Channel6_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[8e]">BDMA_Channel7_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from irq_stm32h7.o(.text.BusFault_Handler) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[65]">CEC_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[4a]">CM4_SEV_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[49]">CM7_SEV_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[8f]">COMP1_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[96]">CRS_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[56]">CRYP_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[dd]">Control</a> from eth_stm32h7.o(.text.Control) referenced from eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[dc]">ControlTimer</a> from eth_stm32h7.o(.text.ControlTimer) referenced from eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[55]">DCMI_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[75]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[76]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[77]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[78]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream7_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[61]">DMA2D_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[41]">DMA2_Stream0_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream1_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream2_IRQHandler</a> from irq_stm32h7.o(.text.DMA2_Stream2_IRQHandler) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream3_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream4_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream5_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream6_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream7_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[6d]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[86]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from irq_stm32h7.o(.text.DebugMon_Handler) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[97]">ECC_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[46]">ETH_IRQHandler</a> from eth_stm32h7.o(.text.ETH_IRQHandler) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[47]">ETH_WKUP_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[1d]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[1f]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[1e]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[20]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[48]">FDCAN_CAL_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[39]">FMC_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[58]">FPU_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[d0]">GetCapabilities</a> from eth_stm32h7.o(.text.GetCapabilities) referenced from eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[e7]">GetLinkInfo</a> from phy_lan8742a.o(.text.GetLinkInfo) referenced from phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
 <LI><a href="#[e6]">GetLinkState</a> from phy_lan8742a.o(.text.GetLinkState) referenced from phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
 <LI><a href="#[d4]">GetMacAddress</a> from eth_stm32h7.o(.text.GetMacAddress) referenced from eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[d9]">GetRxFrameSize</a> from eth_stm32h7.o(.text.GetRxFrameSize) referenced from eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[da]">GetRxFrameTime</a> from eth_stm32h7.o(.text.GetRxFrameTime) referenced from eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[db]">GetTxFrameTime</a> from eth_stm32h7.o(.text.GetTxFrameTime) referenced from eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[cf]">GetVersion</a> from eth_stm32h7.o(.text.GetVersion) referenced from eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[e0]">GetVersion</a> from phy_lan8742a.o(.text.GetVersion) referenced from phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
 <LI><a href="#[57]">HASH_RNG_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[99]">HOLD_CORE_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[74]">HRTIM1_FLT_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[6e]">HRTIM1_Master_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[6f]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[70]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[71]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[72]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[73]">HRTIM1_TIME_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[83]">HSEM1_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[84]">HSEM2_IRQHandler</a> from irq_stm32h7.o(.text.HSEM2_IRQHandler) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from irq_stm32h7.o(.text.HardFault_Handler) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[50]">I2C3_ER_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[4f]">I2C3_EV_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[67]">I2C4_ER_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[66]">I2C4_EV_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[d1]">Initialize</a> from eth_stm32h7.o(.text.Initialize) referenced from eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[e1]">Initialize</a> from phy_lan8742a.o(.text.Initialize) referenced from phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
 <LI><a href="#[80]">JPEG_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[64]">LPTIM1_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[90]">LPTIM2_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[91]">LPTIM3_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[92]">LPTIM4_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[93]">LPTIM5_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[94]">LPUART1_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[60]">LTDC_ER_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[5f]">LTDC_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[7f]">MDIOS_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[7e]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[81]">MDMA_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from irq_stm32h7.o(.text.MemManage_Handler) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from irq_stm32h7.o(.text.NMI_Handler) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[6a]">OTG_FS_EP1_IN_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[69]">OTG_FS_EP1_OUT_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[6c]">OTG_FS_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[6b]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[52]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[51]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[53]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[de]">PHY_Read</a> from eth_stm32h7.o(.text.PHY_Read) referenced from eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[df]">PHY_Write</a> from eth_stm32h7.o(.text.PHY_Write) referenced from eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[b]">PVD_AVD_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[d3]">PowerControl</a> from eth_stm32h7.o(.text.PowerControl) referenced from eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[e3]">PowerControl</a> from phy_lan8742a.o(.text.PowerControl) referenced from phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
 <LI><a href="#[63]">QUADSPI_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[d8]">ReadFrame</a> from eth_stm32h7.o(.text.ReadFrame) referenced from eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[5e]">SAI1_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[62]">SAI2_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[79]">SAI3_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[98]">SAI4_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[3a]">SDMMC1_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[82]">SDMMC2_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[68]">SPDIF_RX_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[3c]">SPI3_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[5b]">SPI4_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[5c]">SPI5_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[5d]">SPI6_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[7a]">SWPMI1_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[d7]">SendFrame</a> from eth_stm32h7.o(.text.SendFrame) referenced from eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[d6]">SetAddressFilter</a> from eth_stm32h7.o(.text.SetAddressFilter) referenced from eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[e4]">SetInterface</a> from phy_lan8742a.o(.text.SetInterface) referenced from phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
 <LI><a href="#[d5]">SetMacAddress</a> from eth_stm32h7.o(.text.SetMacAddress) referenced from eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[e5]">SetMode</a> from phy_lan8742a.o(.text.SetMode) referenced from phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
 <LI><a href="#[9]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced from rtx_kernel.o(.text.svcRtxKernelStart)
 <LI><a href="#[9]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[9b]">SystemInit</a> from system_stm32h7xx_dualcore_boot_cm4_cm7.o(.text.SystemInit) referenced from startup_stm32h755xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[7b]">TIM15_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[7c]">TIM16_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[7d]">TIM17_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[3b]">TIM5_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[3f]">TIM6_DAC_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[40]">TIM7_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[34]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[37]">TIM8_CC_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[36]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[35]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[3d]">UART4_IRQHandler</a> from irq_stm32h7.o(.text.UART4_IRQHandler) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[3e]">UART5_IRQHandler</a> from irq_stm32h7.o(.text.UART5_IRQHandler) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[59]">UART7_IRQHandler</a> from irq_stm32h7.o(.text.UART7_IRQHandler) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[5a]">UART8_IRQHandler</a> from irq_stm32h7.o(.text.UART8_IRQHandler) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[a0]">UART_DMAAbortOnError</a> from stm32h7xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from irq_stm32h7.o(.text.USART1_IRQHandler) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from irq_stm32h7.o(.text.USART2_IRQHandler) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from irq_stm32h7.o(.text.USART3_IRQHandler) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[4e]">USART6_IRQHandler</a> from irq_stm32h7.o(.text.USART6_IRQHandler) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[d2]">Uninitialize</a> from eth_stm32h7.o(.text.Uninitialize) referenced from eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
 <LI><a href="#[e2]">Uninitialize</a> from phy_lan8742a.o(.text.Uninitialize) referenced from phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
 <LI><a href="#[5]">UsageFault_Handler</a> from irq_stm32h7.o(.text.UsageFault_Handler) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[9a]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[95]">WWDG_RST_IRQHandler</a> from startup_stm32h755xx.o(.text) referenced from startup_stm32h755xx.o(RESET)
 <LI><a href="#[9c]">__main</a> from __main.o(!!!main) referenced from startup_stm32h755xx.o(.text)
 <LI><a href="#[a4]">app_idle_task</a> from idle.o(.text.app_idle_task) referenced 2 times from task.o(.text.app_main_task)
 <LI><a href="#[a8]">app_main_task</a> from task.o(.text.app_main_task) referenced 2 times from main.o(.text.main)
 <LI><a href="#[a2]">app_sock_task</a> from sock.o(.text.app_sock_task) referenced 2 times from task.o(.text.app_main_task)
 <LI><a href="#[a3]">app_test_task</a> from test.o(.text.app_test_task) referenced 2 times from task.o(.text.app_main_task)
 <LI><a href="#[e8]">eth0_callback</a> from net_config.o(.text.eth0_callback) referenced from net_config.o(.rodata.eth0_ll_config)
 <LI><a href="#[aa]">netCore_Thread</a> from net_sys.o(i.netCore_Thread) referenced 2 times from net_config.o(.text.netos_thread_create)
 <LI><a href="#[a9]">netETH_Thread</a> from net_eth.o(i.netETH_Thread) referenced 2 times from net_config.o(.text.netif_create)
 <LI><a href="#[ef]">net_arp_cache_init</a> from net_arp.o(i.net_arp_cache_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[f6]">net_arp_cache_run</a> from net_arp.o(i.net_arp_cache_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[ea]">net_eth_config_mcast</a> from net_eth.o(i.net_eth_config_mcast) referenced from net_config.o(.rodata.net_eth0_if_config)
 <LI><a href="#[ec]">net_eth_get_option</a> from net_eth.o(i.net_eth_get_option) referenced from net_config.o(.rodata.netif_getopt_func)
 <LI><a href="#[ed]">net_eth_iface_init</a> from net_eth.o(i.net_eth_iface_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[f4]">net_eth_iface_run</a> from net_eth.o(i.net_eth_iface_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[eb]">net_eth_output</a> from net_eth.o(i.net_eth_output) referenced from net_config.o(.rodata.net_eth0_if_config)
 <LI><a href="#[e9]">net_eth_send_frame</a> from net_eth.o(i.net_eth_send_frame) referenced from net_config.o(.rodata.net_eth0_if_config)
 <LI><a href="#[f0]">net_ip4_frag_init</a> from net_ip4_frag.o(i.net_ip4_frag_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[f7]">net_ip4_frag_run</a> from net_ip4_frag.o(i.net_ip4_frag_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[ee]">net_loop_iface_init</a> from net_loopback.o(i.net_loop_iface_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[f5]">net_loop_iface_run</a> from net_loopback.o(i.net_loop_iface_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[cc]">net_loop_send_frame</a> from net_loopback.o(i.net_loop_send_frame) referenced from net_loopback.o(.constdata)
 <LI><a href="#[f1]">net_ping_client_init</a> from net_ping_core.o(i.net_ping_client_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[f8]">net_ping_client_run</a> from net_ping_core.o(i.net_ping_client_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[ab]">net_sys_tick</a> from net_sys.o(i.net_sys_tick) referenced 2 times from net_config.o(.text.netos_timer_create)
 <LI><a href="#[f3]">net_tcp_socket_init</a> from net_tcp.o(i.net_tcp_socket_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[f9]">net_tcp_socket_run</a> from net_tcp.o(i.net_tcp_socket_run) referenced from net_config.o(.rodata.sys_fn_run)
 <LI><a href="#[f2]">net_udp_socket_init</a> from net_udp.o(i.net_udp_socket_init) referenced from net_config.o(.rodata.sys_fn_init)
 <LI><a href="#[b8]">osRtxIdleThread</a> from rtx_config.o(.text.osRtxIdleThread) referenced from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[c7]">osRtxMemoryInit</a> from rtx_memory.o(.text.osRtxMemoryInit) referenced from rtx_kernel.o(.text.svcRtxKernelInitialize)
 <LI><a href="#[c8]">osRtxMessageQueuePostProcess</a> from rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) referenced from rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
 <LI><a href="#[c9]">osRtxSemaphorePostProcess</a> from rtx_semaphore.o(.text.osRtxSemaphorePostProcess) referenced from rtx_semaphore.o(.text.svcRtxSemaphoreNew)
 <LI><a href="#[cb]">osRtxThreadPostProcess</a> from rtx_thread.o(.text.osRtxThreadPostProcess) referenced from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[ce]">osRtxTimerSetup</a> from rtx_timer.o(.text.osRtxTimerSetup) referenced from rtx_lib.o(.rodata)
 <LI><a href="#[cd]">osRtxTimerThread</a> from rtx_timer.o(.text.osRtxTimerThread) referenced from rtx_lib.o(.rodata)
 <LI><a href="#[b9]">osRtxTimerTick</a> from rtx_timer.o(.text.osRtxTimerTick) referenced from rtx_timer.o(.text.osRtxTimerSetup)
 <LI><a href="#[ca]">osThreadExit</a> from rtx_thread.o(.text.osThreadExit) referenced from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[ac]">svcRtxDelay</a> from rtx_delay.o(.text.svcRtxDelay) referenced from rtx_delay.o(.text.osDelay)
 <LI><a href="#[ad]">svcRtxKernelGetState</a> from rtx_kernel.o(.text.svcRtxKernelGetState) referenced from rtx_kernel.o(.text.osKernelGetState)
 <LI><a href="#[ae]">svcRtxKernelGetTickCount</a> from rtx_kernel.o(.text.svcRtxKernelGetTickCount) referenced from rtx_kernel.o(.text.osKernelGetTickCount)
 <LI><a href="#[af]">svcRtxKernelGetTickFreq</a> from rtx_kernel.o(.text.svcRtxKernelGetTickFreq) referenced from rtx_kernel.o(.text.osKernelGetTickFreq)
 <LI><a href="#[b0]">svcRtxKernelInitialize</a> from rtx_kernel.o(.text.svcRtxKernelInitialize) referenced from rtx_kernel.o(.text.osKernelInitialize)
 <LI><a href="#[b1]">svcRtxKernelStart</a> from rtx_kernel.o(.text.svcRtxKernelStart) referenced from rtx_kernel.o(.text.osKernelStart)
 <LI><a href="#[b2]">svcRtxMessageQueueGet</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueGet) referenced from rtx_msgqueue.o(.text.osMessageQueueGet)
 <LI><a href="#[b3]">svcRtxMessageQueuePut</a> from rtx_msgqueue.o(.text.svcRtxMessageQueuePut) referenced from rtx_msgqueue.o(.text.osMessageQueuePut)
 <LI><a href="#[b4]">svcRtxMutexAcquire</a> from rtx_mutex.o(.text.svcRtxMutexAcquire) referenced from rtx_mutex.o(.text.osMutexAcquire)
 <LI><a href="#[b5]">svcRtxMutexDelete</a> from rtx_mutex.o(.text.svcRtxMutexDelete) referenced from rtx_mutex.o(.text.osMutexDelete)
 <LI><a href="#[b6]">svcRtxMutexNew</a> from rtx_mutex.o(.text.svcRtxMutexNew) referenced from rtx_mutex.o(.text.osMutexNew)
 <LI><a href="#[b7]">svcRtxMutexRelease</a> from rtx_mutex.o(.text.svcRtxMutexRelease) referenced from rtx_mutex.o(.text.osMutexRelease)
 <LI><a href="#[ba]">svcRtxSemaphoreAcquire</a> from rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) referenced from rtx_semaphore.o(.text.osSemaphoreAcquire)
 <LI><a href="#[bb]">svcRtxSemaphoreNew</a> from rtx_semaphore.o(.text.svcRtxSemaphoreNew) referenced from rtx_semaphore.o(.text.osSemaphoreNew)
 <LI><a href="#[bc]">svcRtxSemaphoreRelease</a> from rtx_semaphore.o(.text.svcRtxSemaphoreRelease) referenced from rtx_semaphore.o(.text.osSemaphoreRelease)
 <LI><a href="#[bd]">svcRtxThreadExit</a> from rtx_thread.o(.text.svcRtxThreadExit) referenced from rtx_thread.o(.text.osThreadExit)
 <LI><a href="#[be]">svcRtxThreadFlagsClear</a> from rtx_thread.o(.text.svcRtxThreadFlagsClear) referenced from rtx_thread.o(.text.osThreadFlagsClear)
 <LI><a href="#[bf]">svcRtxThreadFlagsGet</a> from rtx_thread.o(.text.svcRtxThreadFlagsGet) referenced from rtx_thread.o(.text.osThreadFlagsGet)
 <LI><a href="#[c0]">svcRtxThreadFlagsSet</a> from rtx_thread.o(.text.svcRtxThreadFlagsSet) referenced from rtx_thread.o(.text.osThreadFlagsSet)
 <LI><a href="#[c1]">svcRtxThreadFlagsWait</a> from rtx_thread.o(.text.svcRtxThreadFlagsWait) referenced from rtx_thread.o(.text.osThreadFlagsWait)
 <LI><a href="#[c2]">svcRtxThreadGetId</a> from rtx_thread.o(.text.svcRtxThreadGetId) referenced from rtx_thread.o(.text.osThreadGetId)
 <LI><a href="#[c3]">svcRtxThreadNew</a> from rtx_thread.o(.text.svcRtxThreadNew) referenced from rtx_thread.o(.text.osThreadNew)
 <LI><a href="#[c4]">svcRtxThreadYield</a> from rtx_thread.o(.text.svcRtxThreadYield) referenced from rtx_thread.o(.text.osThreadYield)
 <LI><a href="#[c5]">svcRtxTimerNew</a> from rtx_timer.o(.text.svcRtxTimerNew) referenced from rtx_timer.o(.text.osTimerNew)
 <LI><a href="#[c6]">svcRtxTimerStart</a> from rtx_timer.o(.text.svcRtxTimerStart) referenced from rtx_timer.o(.text.osTimerStart)
 <LI><a href="#[a7]">tcp_cb_func</a> from sock.o(.text.tcp_cb_func) referenced 2 times from sock.o(.text.app_sock_task)
 <LI><a href="#[a1]">udp_cb_func</a> from idle.o(.text.udp_cb_func) referenced 2 times from idle.o(.text.app_idle_task)
 <LI><a href="#[a5]">udp_cb_func</a> from task.o(.text.udp_cb_func) referenced 2 times from task.o(.text.app_main_task)
 <LI><a href="#[a6]">udp_cb_func</a> from sock.o(.text.udp_cb_func) referenced 2 times from sock.o(.text.app_sock_task)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(.text)
</UL>
<P><STRONG><a name="[fe]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[100]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2b6]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2b7]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2b8]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[2b9]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[2ba]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[108]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[101]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[2bb]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2bc]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2bd]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2be]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2bf]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[2c0]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[2c1]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2c2]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[2c3]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[2c4]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[2c5]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2c6]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2c7]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2c8]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2c9]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[2ca]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2cb]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[2cc]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2cd]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[2ce]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[10d]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[2cf]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[2d0]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[2d1]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2d2]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[2d3]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[2d4]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[2d5]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[ff]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[2d6]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[103]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[105]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; osRtxKernelPreInit &rArr; evr_initialize &rArr; EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[107]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[109]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; osKernelInitialize &rArr; osRtxKernelPreInit &rArr; evr_initialize &rArr; EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2d7]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[118]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[10c]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[2d8]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[10e]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CM4_SEV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CM7_SEV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>HOLD_CORE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>OTG_FS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OTG_FS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>WWDG_RST_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h755xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[117]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32h755xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 154 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_stm32h755xx.o(RESET)
<LI> rtx_kernel.o(.text.svcRtxKernelStart)
</UL>
<P><STRONG><a name="[247]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_cb_func
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
</UL>

<P><STRONG><a name="[1da]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFrame
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_cb_func
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sock_send
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_idle_task
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_cb_func
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_get
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[112]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2d9]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_cb_func
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[2da]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[157]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_socket_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[159]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[2db]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[2dc]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[2df]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[10b]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2e2]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[10f]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[2e3]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2e4]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2e5]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>ADC_ConfigureBoostMode</STRONG> (Thumb, 534 bytes, Stack size 24 bytes, stm32h7xx_hal_adc.o(.text.ADC_ConfigureBoostMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ADC_ConfigureBoostMode &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[9d]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, stm32h7xx_hal_adc.o(.text.ADC_DMAConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ADC_DMAConvCplt &rArr; HAL_ADC_ConvCpltCallback &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsTriggerSourceSWStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_adc.o(.text.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[9f]"></a>ADC_DMAError</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32h7xx_hal_adc.o(.text.ADC_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_DMAError &rArr; HAL_ADC_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_adc.o(.text.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[9e]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32h7xx_hal_adc.o(.text.ADC_DMAHalfConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_DMAHalfConvCplt &rArr; HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_adc.o(.text.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[121]"></a>ADC_Disable</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, stm32h7xx_hal_adc.o(.text.ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC_Disable &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsDisableOngoing
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[126]"></a>ADC_Enable</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, stm32h7xx_hal_adc.o(.text.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ADC_Enable &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetMultimode
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[129]"></a>ADC_Init</STRONG> (Thumb, 350 bytes, Stack size 48 bytes, adc_stm32h7.o(.text.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ADC_Init &rArr; HAL_ADC_Init &rArr; ADC_ConfigureBoostMode &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, irq_stm32h7.o(.text.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BusFault_Handler &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, irq_stm32h7.o(.text.DMA2_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, irq_stm32h7.o(.text.DebugMon_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DebugMon_Handler &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[137]"></a>EEP_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, eep_stm32h7.o(.text.EEP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = EEP_Init &rArr; EE_Init &rArr; EE_VerifyPageFullWriteVariable &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[13b]"></a>EEP_ReadVariable</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, eep_stm32h7.o(.text.EEP_ReadVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = EEP_ReadVariable &rArr; EE_ReadVariable &rArr; EE_FindValidPage
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[13d]"></a>EEP_WriteVariable</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, eep_stm32h7.o(.text.EEP_WriteVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = EEP_WriteVariable &rArr; EE_WriteVariable &rArr; EE_PageTransfer &rArr; EE_VerifyPageFullWriteVariable &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[139]"></a>EE_Init</STRONG> (Thumb, 1136 bytes, Stack size 88 bytes, eeprom.o(.text.EE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = EE_Init &rArr; EE_VerifyPageFullWriteVariable &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullyErased
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_Init
</UL>

<P><STRONG><a name="[13c]"></a>EE_ReadVariable</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, eeprom.o(.text.EE_ReadVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EE_ReadVariable &rArr; EE_FindValidPage
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_FindValidPage
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_ReadVariable
</UL>

<P><STRONG><a name="[13e]"></a>EE_WriteVariable</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, eeprom.o(.text.EE_WriteVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = EE_WriteVariable &rArr; EE_PageTransfer &rArr; EE_VerifyPageFullWriteVariable &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_WriteVariable
</UL>

<P><STRONG><a name="[46]"></a>ETH_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eth_stm32h7.o(.text.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ETH_IRQHandler &rArr; HAL_ETH_IRQHandler &rArr; HAL_ETH_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[12b]"></a>ErrorHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(.text.ErrorHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[1fd]"></a>EventRecorderDisable</STRONG> (Thumb, 146 bytes, Stack size 28 bytes, eventrecorder.o(.text.EventRecorderDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EventRecorderDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evr_initialize
</UL>

<P><STRONG><a name="[15c]"></a>EventRecorderEnable</STRONG> (Thumb, 146 bytes, Stack size 28 bytes, eventrecorder.o(.text.EventRecorderEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EventRecorderEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evr_initialize
</UL>

<P><STRONG><a name="[156]"></a>EventRecorderInitialize</STRONG> (Thumb, 452 bytes, Stack size 56 bytes, eventrecorder.o(.text.EventRecorderInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerSetup
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetFreq
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderEnable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evr_initialize
</UL>

<P><STRONG><a name="[15d]"></a>EventRecorderStart</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, eventrecorder.o(.text.EventRecorderStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = EventRecorderStart &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[14c]"></a>EventRecorderTimerGetCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eventrecorder.o(.text.EventRecorderTimerGetCount))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[15b]"></a>EventRecorderTimerGetFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eventrecorder.o(.text.EventRecorderTimerGetFreq))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[15a]"></a>EventRecorderTimerSetup</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, eventrecorder.o(.text.EventRecorderTimerSetup))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[15e]"></a>FIFO_FlushQueue</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, fifo.o(.text.FIFO_FlushQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FIFO_FlushQueue &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sock_task
</UL>

<P><STRONG><a name="[160]"></a>FIFO_GetAvailable</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, fifo.o(.text.FIFO_GetAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FIFO_GetAvailable &rArr; FIFO_GetCount &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_GetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_PushQueue
</UL>

<P><STRONG><a name="[161]"></a>FIFO_GetCount</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fifo.o(.text.FIFO_GetCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FIFO_GetCount &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_GetAvailable
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_PullQueue
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sock_task
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_idle_task
</UL>

<P><STRONG><a name="[162]"></a>FIFO_InitQueue</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fifo.o(.text.FIFO_InitQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FIFO_InitQueue &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sock_task
</UL>

<P><STRONG><a name="[163]"></a>FIFO_PullQueue</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, fifo.o(.text.FIFO_PullQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FIFO_PullQueue &rArr; FIFO_GetCount &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_GetCount
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sock_task
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_idle_task
</UL>

<P><STRONG><a name="[164]"></a>FIFO_PushQueue</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, fifo.o(.text.FIFO_PushQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FIFO_PushQueue &rArr; FIFO_GetAvailable &rArr; FIFO_GetCount &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_GetAvailable
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_cb_func
</UL>

<P><STRONG><a name="[165]"></a>FLASH_Erase_Sector</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, stm32h7xx_hal_flash_ex.o(.text.FLASH_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FLASH_Erase_Sector &rArr; assert_failed &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[168]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, stm32h7xx_hal_flash.o(.text.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FLASH_WaitForLastOperation &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[12c]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, stm32h7xx_hal_adc_ex.o(.text.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_ADCEx_Calibration_Start &rArr; ADC_Disable &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_StartCalibration
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsCalibrationOnGoing
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[12d]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 3802 bytes, Stack size 208 bytes, stm32h7xx_hal_adc.o(.text.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; assert_failed &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffsetSignedSaturation
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffset
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetDataRightShift
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetCommonPathInternalCh
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSingleDiff
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSamplingTime
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerRanks
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetResolution
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetCommonPathInternalCh
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[11e]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, adc_stm32h7.o(.text.HAL_ADC_ConvCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ADC_ConvCpltCallback &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[120]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_adc.o(.text.HAL_ADC_ConvHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[11f]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_adc.o(.text.HAL_ADC_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_ADC_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[12a]"></a>HAL_ADC_Init</STRONG> (Thumb, 2428 bytes, Stack size 56 bytes, stm32h7xx_hal_adc.o(.text.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HAL_ADC_Init &rArr; ADC_ConfigureBoostMode &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigureBoostMode
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetCommonClock
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsInternalRegulatorEnabled
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsDeepPowerDownEnabled
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_EnableInternalRegulator
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_DisableDeepPowerDown
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[17c]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 384 bytes, Stack size 72 bytes, msp_stm32h7.o(.text.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_DMA_Init &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[12e]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 550 bytes, Stack size 40 bytes, stm32h7xx_hal_adc.o(.text.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_StartConversion
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetDataTransferMode
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetMultimode
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[18a]"></a>HAL_DMA_Abort</STRONG> (Thumb, 2424 bytes, Stack size 48 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_DMA_Abort &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1bf]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 1706 bytes, Stack size 32 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[183]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 1148 bytes, Stack size 40 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_DMA_DeInit &rArr; DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[136]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 4546 bytes, Stack size 72 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
</UL>

<P><STRONG><a name="[184]"></a>HAL_DMA_Init</STRONG> (Thumb, 3488 bytes, Stack size 64 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_DMA_Init &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[188]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 1828 bytes, Stack size 40 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[1db]"></a>HAL_ETH_BuildRxDescriptors</STRONG> (Thumb, 250 bytes, Stack size 28 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_BuildRxDescriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_ETH_BuildRxDescriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFrame
</UL>

<P><STRONG><a name="[195]"></a>HAL_ETH_DMAErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_DMAErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_ETH_DMAErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[190]"></a>HAL_ETH_DeInit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_ETH_DeInit &rArr; HAL_ETH_MspDeInit &rArr; HAL_GPIO_DeInit &rArr; assert_failed &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_ETH_DescAssignMemory</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_DescAssignMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ETH_DescAssignMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[198]"></a>HAL_ETH_EEECallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_EEECallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_ETH_EEECallback
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[12f]"></a>HAL_ETH_GetMACConfig</STRONG> (Thumb, 650 bytes, Stack size 12 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_GetMACConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_ETH_GetMACConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
</UL>

<P><STRONG><a name="[130]"></a>HAL_ETH_GetMACFilterConfig</STRONG> (Thumb, 194 bytes, Stack size 12 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_GetMACFilterConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_ETH_GetMACFilterConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
</UL>

<P><STRONG><a name="[16a]"></a>HAL_ETH_GetRxDataBuffer</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_GetRxDataBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_ETH_GetRxDataBuffer &rArr; HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxFrameSize
</UL>

<P><STRONG><a name="[16b]"></a>HAL_ETH_GetRxDataLength</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_GetRxDataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_ETH_GetRxDataLength &rArr; HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxFrameSize
</UL>

<P><STRONG><a name="[146]"></a>HAL_ETH_IRQHandler</STRONG> (Thumb, 512 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ETH_IRQHandler &rArr; HAL_ETH_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TxCpltCallback
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxCpltCallback
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_PMTCallback
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WakeUpCallback
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MACErrorCallback
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_EEECallback
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_DMAErrorCallback
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetCurrentCPUID
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[19b]"></a>HAL_ETH_Init</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = HAL_ETH_Init &rArr; ETH_MACDMAConfig &rArr; ETH_SetMACConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCFG_ETHInterfaceSelect
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MAC_MDIO_ClkConfig
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescListInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescListInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl
</UL>

<P><STRONG><a name="[192]"></a>HAL_ETH_IsRxDataAvailable</STRONG> (Thumb, 570 bytes, Stack size 36 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_IsRxDataAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetRxDataLength
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetRxDataBuffer
</UL>

<P><STRONG><a name="[196]"></a>HAL_ETH_MACErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_MACErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_ETH_MACErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[191]"></a>HAL_ETH_MspDeInit</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, msp_stm32h7.o(.text.HAL_ETH_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_ETH_MspDeInit &rArr; HAL_GPIO_DeInit &rArr; assert_failed &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_DeInit
</UL>

<P><STRONG><a name="[19c]"></a>HAL_ETH_MspInit</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, msp_stm32h7.o(.text.HAL_ETH_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_ETH_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[197]"></a>HAL_ETH_PMTCallback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, eth_stm32h7.o(.text.HAL_ETH_PMTCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ETH_PMTCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_ETH_ReadPHYRegister</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_ReadPHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ETH_ReadPHYRegister &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Read
</UL>

<P><STRONG><a name="[193]"></a>HAL_ETH_RxCpltCallback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, eth_stm32h7.o(.text.HAL_ETH_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ETH_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>HAL_ETH_SetMACConfig</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_SetMACConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_ETH_SetMACConfig &rArr; ETH_SetMACConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetMACConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
</UL>

<P><STRONG><a name="[132]"></a>HAL_ETH_SetMACFilterConfig</STRONG> (Thumb, 152 bytes, Stack size 28 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_SetMACFilterConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_ETH_SetMACFilterConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
</UL>

<P><STRONG><a name="[135]"></a>HAL_ETH_SetRxVLANIdentifier</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_SetRxVLANIdentifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_ETH_SetRxVLANIdentifier
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
</UL>

<P><STRONG><a name="[133]"></a>HAL_ETH_Start_IT</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ETH_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
</UL>

<P><STRONG><a name="[134]"></a>HAL_ETH_Stop_IT</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_Stop_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ETH_Stop_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_ETH_Transmit_IT</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ETH_Transmit_IT &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
</UL>

<P><STRONG><a name="[194]"></a>HAL_ETH_TxCpltCallback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, eth_stm32h7.o(.text.HAL_ETH_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ETH_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[19a]"></a>HAL_ETH_WakeUpCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_WakeUpCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_ETH_WakeUpCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_ETH_WritePHYRegister</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, stm32h7xx_hal_eth.o(.text.HAL_ETH_WritePHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ETH_WritePHYRegister &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Write
</UL>

<P><STRONG><a name="[141]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 556 bytes, Stack size 32 bytes, stm32h7xx_hal_flash_ex.o(.text.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
</UL>

<P><STRONG><a name="[13a]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, stm32h7xx_hal_flash.o(.text.HAL_FLASH_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_WriteVariable
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_Init
</UL>

<P><STRONG><a name="[142]"></a>HAL_FLASH_Program</STRONG> (Thumb, 446 bytes, Stack size 48 bytes, stm32h7xx_hal_flash.o(.text.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
</UL>

<P><STRONG><a name="[138]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 158 bytes, Stack size 4 bytes, stm32h7xx_hal_flash.o(.text.HAL_FLASH_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_WriteVariable
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_Init
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 814 bytes, Stack size 72 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_GPIO_DeInit &rArr; assert_failed &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspDeInit
</UL>

<P><STRONG><a name="[182]"></a>HAL_GPIO_Init</STRONG> (Thumb, 1692 bytes, Stack size 72 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_GPIO_Init &rArr; assert_failed &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[199]"></a>HAL_GetCurrentCPUID</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, stm32h7xx_hal_cortex.o(.text.HAL_GetCurrentCPUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_GetCurrentCPUID
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnterSTOPMode
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ClearPendingEvent
</UL>

<P><STRONG><a name="[11c]"></a>HAL_GetREVID</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigureBoostMode
</UL>

<P><STRONG><a name="[125]"></a>HAL_GetTick</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, main.o(.text.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>

<P><STRONG><a name="[1fe]"></a>HAL_HSEM_ActivateNotification</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32h7xx_hal_hsem.o(.text.HAL_HSEM_ActivateNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_HSEM_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1aa]"></a>HAL_HSEM_FreeCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_hsem.o(.text.HAL_HSEM_FreeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_HSEM_FreeCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HSEM_IRQHandler
</UL>

<P><STRONG><a name="[1a9]"></a>HAL_HSEM_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32h7xx_hal_hsem.o(.text.HAL_HSEM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_HSEM_IRQHandler &rArr; HAL_HSEM_FreeCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HSEM_FreeCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSEM2_IRQHandler
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_Init</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, stm32h7xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_Init &rArr; HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ae]"></a>HAL_InitTick</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, main.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1af]"></a>HAL_MspInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, msp_stm32h7.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_NVIC_DisableIRQ &rArr; assert_failed &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspDeInit
</UL>

<P><STRONG><a name="[186]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; assert_failed &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[185]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[1ac]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; assert_failed &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_PWREx_ClearPendingEvent</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32h7xx_hal_pwr_ex.o(.text.HAL_PWREx_ClearPendingEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_PWREx_ClearPendingEvent &rArr; HAL_GetCurrentCPUID
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetCurrentCPUID
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b7]"></a>HAL_PWREx_EnterSTOPMode</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, stm32h7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnterSTOPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PWREx_EnterSTOPMode &rArr; assert_failed &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetCurrentCPUID
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_RCCEx_GetD3PCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetD3PCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_RCCEx_GetPLL1ClockFreq</STRONG> (Thumb, 684 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL1ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_GetPLL1ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[1ba]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 684 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[1bb]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 684 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[11b]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 2776 bytes, Stack size 104 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL1ClockFreq
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigureBoostMode
</UL>

<P><STRONG><a name="[11a]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MAC_MDIO_ClkConfig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigureBoostMode
</UL>

<P><STRONG><a name="[1ad]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 784 bytes, Stack size 40 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[19d]"></a>HAL_SYSCFG_ETHInterfaceSelect</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32h7xx_hal.o(.text.HAL_SYSCFG_ETHInterfaceSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SYSCFG_ETHInterfaceSelect &rArr; assert_failed &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[1c0]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1c4]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_RxFifoFullCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UARTEx_RxFifoFullCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1c3]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_TxFifoEmptyCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UARTEx_TxFifoEmptyCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1c1]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_WakeupCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UARTEx_WakeupCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, com_stm32h7.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_ErrorCallback &rArr; assert_failed &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 1460 bytes, Stack size 40 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, com_stm32h7.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; assert_failed &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[84]"></a>HSEM2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, irq_stm32h7.o(.text.HSEM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HSEM2_IRQHandler &rArr; HAL_HSEM_IRQHandler &rArr; HAL_HSEM_FreeCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HSEM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, irq_stm32h7.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardFault_Handler &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[1eb]"></a>LMS_Load</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, main.o(.text.LMS_Load))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LMS_Load
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[1d0]"></a>MODBUS_GetRegister</STRONG> (Thumb, 686 bytes, Stack size 36 bytes, modbus.o(.text.MODBUS_GetRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MODBUS_GetRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ReadInputRegisters
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ReadHoldingRegisters
</UL>

<P><STRONG><a name="[1ce]"></a>MODBUS_GetStatus</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, modbus.o(.text.MODBUS_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MODBUS_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ReadInputStatus
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ReadCoilStatus
</UL>

<P><STRONG><a name="[1d3]"></a>MODBUS_ReplyToQuery</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, modbus.o(.text.MODBUS_ReplyToQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MODBUS_ReplyToQuery &rArr; MODBUS_ReadInputRegisters &rArr; MODBUS_GetRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ReadInputStatus
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ReadInputRegisters
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ReadHoldingRegisters
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ReadCoilStatus
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_PresetSingleRegister
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_PresetMultipleRegisters
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ForceSingleCoil
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ForceMultipleCoils
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_cb_func
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sock_task
</UL>

<P><STRONG><a name="[1cb]"></a>MODBUS_SetRegister</STRONG> (Thumb, 1100 bytes, Stack size 16 bytes, modbus.o(.text.MODBUS_SetRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MODBUS_SetRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_PresetSingleRegister
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_PresetMultipleRegisters
</UL>

<P><STRONG><a name="[1c8]"></a>MODBUS_SetStatus</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, modbus.o(.text.MODBUS_SetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MODBUS_SetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ForceSingleCoil
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ForceMultipleCoils
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, irq_stm32h7.o(.text.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MemManage_Handler &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, irq_stm32h7.o(.text.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NMI_Handler &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[239]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[240]"></a>OS_Tick_Enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[23f]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[23e]"></a>OS_Tick_Setup</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Setup))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[9b]"></a>SystemInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, system_stm32h7xx_dualcore_boot_cm4_cm7.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>UART4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, irq_stm32h7.o(.text.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UART4_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART5_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, irq_stm32h7.o(.text.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UART5_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>UART7_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, irq_stm32h7.o(.text.UART7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UART7_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>UART8_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, irq_stm32h7.o(.text.UART8_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UART8_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, irq_stm32h7.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, irq_stm32h7.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, irq_stm32h7.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>USART6_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, irq_stm32h7.o(.text.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USART6_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, irq_stm32h7.o(.text.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UsageFault_Handler &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h755xx.o(RESET)
</UL>
<P><STRONG><a name="[15f]"></a>__aeabi_assert</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_PushQueue
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_PullQueue
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_InitQueue
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_GetCount
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_FlushQueue
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_cb_func
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_cb_func
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_task
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sock_task
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_idle_task
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_cb_func
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[fb]"></a>_mutex_acquire</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtx_lib.o(.text._mutex_acquire), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mutex_acquire &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[fd]"></a>_mutex_free</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtx_lib.o(.text._mutex_free), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[fa]"></a>_mutex_initialize</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rtx_lib.o(.text._mutex_initialize), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _mutex_initialize &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[fc]"></a>_mutex_release</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rtx_lib.o(.text._mutex_release), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mutex_release &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[106]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtx_lib.o(.text._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; osRtxKernelPreInit &rArr; evr_initialize &rArr; EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[a4]"></a>app_idle_task</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, idle.o(.text.app_idle_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = app_idle_task &rArr; netUDP_Send &rArr; net_udp_send_if &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_PullQueue
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_GetCount
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_Send
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_Open
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_GetSocket
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_GetBuffer
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.text.app_main_task)
</UL>
<P><STRONG><a name="[a8]"></a>app_main_task</STRONG> (Thumb, 1532 bytes, Stack size 72 bytes, task.o(.text.app_main_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = app_main_task &rArr; EEP_WriteVariable &rArr; EE_WriteVariable &rArr; EE_PageTransfer &rArr; EE_VerifyPageFullWriteVariable &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsGet
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsClear
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_Open
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_GetSocket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIF_GetOption
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_WriteVariable
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_ReadVariable
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMS_Load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[a2]"></a>app_sock_task</STRONG> (Thumb, 4938 bytes, Stack size 560 bytes, sock.o(.text.app_sock_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = app_sock_task &rArr; tcp_sock_send &rArr; netTCP_Send &rArr; net_tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_SetOption
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_SendReady
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Listen
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_GetState
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_GetSocket
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Abort
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ReplyToQuery
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_PullQueue
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_InitQueue
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_GetCount
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_FlushQueue
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sock_send
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_Open
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_GetSocket
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.text.app_main_task)
</UL>
<P><STRONG><a name="[a3]"></a>app_test_task</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, test.o(.text.app_test_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_test_task &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.text.app_main_task)
</UL>
<P><STRONG><a name="[166]"></a>assert_failed</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text.assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = assert_failed &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCFG_ETHInterfaceSelect
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_cb_func
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sock_send
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnterSTOPMode
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[10a]"></a>main</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = main &rArr; osKernelInitialize &rArr; osRtxKernelPreInit &rArr; evr_initialize &rArr; EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnterSTOPMode
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ClearPendingEvent
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HSEM_ActivateNotification
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[28f]"></a>net_igmp_collect_mcast</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, net_config.o(.text.net_igmp_collect_mcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_igmp_collect_mcast
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
</UL>

<P><STRONG><a name="[298]"></a>net_igmp_is_member</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, net_config.o(.text.net_igmp_is_member))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_igmp_is_member
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[262]"></a>net_igmp_process</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, net_config.o(.text.net_igmp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_igmp_process
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[200]"></a>net_sys_error</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, bsp_stm32h7.o(.text.net_sys_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
</UL>

<P><STRONG><a name="[201]"></a>netif_create</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, net_config.o(.text.netif_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = netif_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
</UL>

<P><STRONG><a name="[203]"></a>netif_lock</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, net_config.o(.text.netif_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netif_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
</UL>

<P><STRONG><a name="[205]"></a>netif_unlock</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, net_config.o(.text.netif_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = netif_unlock &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
</UL>

<P><STRONG><a name="[207]"></a>netos_delay</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, net_config.o(.text.netos_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netos_delay &rArr; ms2tick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms2tick
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[209]"></a>netos_flag_clear</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, net_config.o(.text.netos_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netos_flag_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsClear
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[20a]"></a>netos_flag_set</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, net_config.o(.text.netos_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_callback
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_resume
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
</UL>

<P><STRONG><a name="[20b]"></a>netos_flag_wait</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, net_config.o(.text.netos_flag_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netos_flag_wait &rArr; ms2tick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms2tick
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[20c]"></a>netos_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, net_config.o(.text.netos_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_init
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[20e]"></a>netos_lock</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, net_config.o(.text.netos_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netos_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>

<P><STRONG><a name="[20f]"></a>netos_mutex_create</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, net_config.o(.text.netos_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netos_mutex_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_init
</UL>

<P><STRONG><a name="[210]"></a>netos_thread_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_config.o(.text.netos_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_thread_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[211]"></a>netos_thread_pass</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, net_config.o(.text.netos_thread_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netos_thread_pass
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[212]"></a>netos_timer_create</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, net_config.o(.text.netos_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netos_timer_create &rArr; osTimerNew
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[214]"></a>netos_timer_start</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, net_config.o(.text.netos_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netos_timer_start &rArr; ms2tick
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms2tick
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[216]"></a>netos_unlock</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, net_config.o(.text.netos_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
</UL>

<P><STRONG><a name="[1f1]"></a>osDelay</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_delay.o(.text.osDelay))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_task
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_delay
</UL>

<P><STRONG><a name="[1a6]"></a>osKernelGetState</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[1a8]"></a>osKernelGetTickCount</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[20d]"></a>osKernelGetTickFreq</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetTickFreq))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_init
</UL>

<P><STRONG><a name="[1e4]"></a>osKernelInitialize</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = osKernelInitialize &rArr; osRtxKernelPreInit &rArr; evr_initialize &rArr; EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ff]"></a>osKernelStart</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelStart))
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[219]"></a>osMessageQueueGet</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[21c]"></a>osMessageQueuePut</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[1df]"></a>osMutexAcquire</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_lock
</UL>

<P><STRONG><a name="[1e0]"></a>osMutexDelete</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexDelete), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[1e1]"></a>osMutexNew</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexNew))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_mutex_create
</UL>

<P><STRONG><a name="[1e3]"></a>osMutexRelease</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_unlock
</UL>

<P><STRONG><a name="[21e]"></a>osRtxErrorNotify</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, bsp_stm32h7.o(.text.osRtxErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>

<P><STRONG><a name="[b8]"></a>osRtxIdleThread</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, rtx_config.o(.text.osRtxIdleThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = osRtxIdleThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[1e2]"></a>osRtxKernelErrorNotify</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osRtxKernelErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[217]"></a>osRtxKernelPreInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_lib.o(.text.osRtxKernelPreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = osRtxKernelPreInit &rArr; evr_initialize &rArr; EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evr_initialize
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[241]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, rtx_memory.o(.text.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[231]"></a>osRtxMemoryFree</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rtx_memory.o(.text.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[c7]"></a>osRtxMemoryInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtx_memory.o(.text.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.svcRtxKernelInitialize)
</UL>
<P><STRONG><a name="[21d]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rtx_mempool.o(.text.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[220]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[1d6]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[224]"></a>osRtxMessageQueueTimerSetup</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerSetup
</UL>

<P><STRONG><a name="[226]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[227]"></a>osRtxMutexOwnerRestore</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[110]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[21b]"></a>osRtxPostProcess</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[22a]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[229]"></a>osRtxThreadDispatch</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[221]"></a>osRtxThreadListGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[233]"></a>osRtxThreadListPut</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadListPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[22c]"></a>osRtxThreadListRemove</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
</UL>

<P><STRONG><a name="[228]"></a>osRtxThreadListSort</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
</UL>

<P><STRONG><a name="[22d]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadReadyPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadYield
</UL>

<P><STRONG><a name="[222]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[235]"></a>osRtxThreadStartup</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[23a]"></a>osRtxThreadSwitch</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[236]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[1d8]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[111]"></a>osRtxTick_Handler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ce]"></a>osRtxTimerSetup</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtx_timer.o(.text.osRtxTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = osRtxTimerSetup &rArr; osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[cd]"></a>osRtxTimerThread</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_timer.o(.text.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[204]"></a>osSemaphoreAcquire</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osSemaphoreAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_lock
</UL>

<P><STRONG><a name="[202]"></a>osSemaphoreNew</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osSemaphoreNew))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_create
</UL>

<P><STRONG><a name="[206]"></a>osSemaphoreRelease</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_unlock
</UL>

<P><STRONG><a name="[ca]"></a>osThreadExit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[1f0]"></a>osThreadFlagsClear</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadFlagsClear))
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_clear
</UL>

<P><STRONG><a name="[1ef]"></a>osThreadFlagsGet</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadFlagsGet))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[1e8]"></a>osThreadFlagsSet</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rtx_thread.o(.text.osThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_cb_func
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_task
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sock_task
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_idle_task
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>

<P><STRONG><a name="[1f6]"></a>osThreadFlagsWait</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadFlagsWait))
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sock_task
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
</UL>

<P><STRONG><a name="[1e5]"></a>osThreadGetId</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadGetId))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_task
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sock_task
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_idle_task
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[1ee]"></a>osThreadNew</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadNew))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_create
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_create
</UL>

<P><STRONG><a name="[1a7]"></a>osThreadYield</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadYield))
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_test_task
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sock_task
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_idle_task
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_pass
</UL>

<P><STRONG><a name="[213]"></a>osTimerNew</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_timer.o(.text.osTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osTimerNew
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_create
</UL>

<P><STRONG><a name="[215]"></a>osTimerStart</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_timer.o(.text.osTimerStart))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_start
</UL>

<P><STRONG><a name="[aa]"></a>netCore_Thread</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, net_sys.o(i.netCore_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netCore_Thread &rArr; netos_timer_start &rArr; ms2tick
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_start
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_pass
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_proc_tick
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.text.netos_thread_create)
</UL>
<P><STRONG><a name="[254]"></a>netETH_Notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_eth.o(i.netETH_Notify))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
</UL>

<P><STRONG><a name="[25a]"></a>netETH_ReceiveRaw</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_eth.o(i.netETH_ReceiveRaw))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[a9]"></a>netETH_Thread</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, net_eth.o(i.netETH_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = netETH_Thread &rArr; eth_receive &rArr; net_sys_wakeup &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_delay
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_receive
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_check_link
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.text.netif_create)
</UL>
<P><STRONG><a name="[1ed]"></a>netIF_GetOption</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, net_sys.o(i.netIF_GetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netIF_GetOption &rArr; net_sys_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_map_all
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[1ec]"></a>netInitialize</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, net_sys.o(i.netInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = netInitialize &rArr; net_mem_init &rArr; netos_mutex_create
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_create
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_thread_create
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_mutex_create
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[253]"></a>netMAC_aton</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, net_addr.o(i.netMAC_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netMAC_aton &rArr; net_xtouc
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_xtouc
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
</UL>

<P><STRONG><a name="[1f9]"></a>netTCP_Abort</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, net_tcp.o(i.netTCP_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = netTCP_Abort &rArr; net_tcp_abort &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_abort
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_cb_func
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sock_task
</UL>

<P><STRONG><a name="[245]"></a>netTCP_GetBuffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_tcp.o(i.netTCP_GetBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netTCP_GetBuffer &rArr; net_tcp_get_buf &rArr; net_mem_alloc &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sock_send
</UL>

<P><STRONG><a name="[1f2]"></a>netTCP_GetSocket</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, net_tcp.o(i.netTCP_GetSocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = netTCP_GetSocket &rArr; net_sys_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_socket
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sock_task
</UL>

<P><STRONG><a name="[1f4]"></a>netTCP_GetState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_tcp.o(i.netTCP_GetState))
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sock_task
</UL>

<P><STRONG><a name="[1f5]"></a>netTCP_Listen</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, net_tcp.o(i.netTCP_Listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netTCP_Listen &rArr; net_sys_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_listen
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sock_task
</UL>

<P><STRONG><a name="[246]"></a>netTCP_Send</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, net_tcp.o(i.netTCP_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = netTCP_Send &rArr; net_tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_send
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sock_send
</UL>

<P><STRONG><a name="[1f7]"></a>netTCP_SendReady</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_tcp.o(i.netTCP_SendReady))
<BR><BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_check_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sock_send
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sock_task
</UL>

<P><STRONG><a name="[1f3]"></a>netTCP_SetOption</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net_tcp.o(i.netTCP_SetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netTCP_SetOption &rArr; net_sys_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_set_option
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sock_task
</UL>

<P><STRONG><a name="[1e9]"></a>netUDP_GetBuffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_udp.o(i.netUDP_GetBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netUDP_GetBuffer &rArr; net_udp_get_buf &rArr; net_mem_alloc &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_cb_func
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_idle_task
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_cb_func
</UL>

<P><STRONG><a name="[1e6]"></a>netUDP_GetSocket</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, net_udp.o(i.netUDP_GetSocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = netUDP_GetSocket &rArr; net_sys_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_socket
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sock_task
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_idle_task
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[1e7]"></a>netUDP_Open</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, net_udp.o(i.netUDP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netUDP_Open &rArr; net_udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sock_task
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_idle_task
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main_task
</UL>

<P><STRONG><a name="[1ea]"></a>netUDP_Send</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, net_udp.o(i.netUDP_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = netUDP_Send &rArr; net_udp_send_if &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_unlock
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_cb_func
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_idle_task
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_cb_func
</UL>

<P><STRONG><a name="[256]"></a>net_addr4_aton</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, net_addr.o(i.net_addr4_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_addr4_aton &rArr; net_atoi
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
</UL>

<P><STRONG><a name="[291]"></a>net_addr4_to_mac</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, net_addr.o(i.net_addr4_to_mac))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[282]"></a>net_addr_find_route</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_addr.o(i.net_addr_find_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_addr_find_route &rArr; net_ip4_find_route
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_find_route
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
</UL>

<P><STRONG><a name="[284]"></a>net_addr_get_local</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_addr.o(i.net_addr_get_local))
<BR><BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
</UL>

<P><STRONG><a name="[2af]"></a>net_addr_is_unspec</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_addr.o(i.net_addr_is_unspec))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
</UL>

<P><STRONG><a name="[25e]"></a>net_arp_cache_add</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_cache_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = net_arp_cache_add &rArr; arp_que_free &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_onlink
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_is_cacheable
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[25d]"></a>net_arp_cache_early</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_cache_early))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = net_arp_cache_early &rArr; arp_send_request &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_onlink
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_is_cacheable
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[289]"></a>net_arp_cache_find</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_cache_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = net_arp_cache_find &rArr; arp_que_free &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_onlink
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[ef]"></a>net_arp_cache_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, net_arp.o(i.net_arp_cache_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = net_arp_cache_init
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[f6]"></a>net_arp_cache_run</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_arp.o(i.net_arp_cache_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = net_arp_cache_run &rArr; arp_cache_run &rArr; arp_probe_run &rArr; net_sys_resume &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[28a]"></a>net_arp_enqueue</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = net_arp_enqueue &rArr; arp_send_request &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_avail
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>

<P><STRONG><a name="[259]"></a>net_arp_notify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, net_arp.o(i.net_arp_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = net_arp_notify &rArr; arp_send_request &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[25b]"></a>net_arp_process</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, net_arp.o(i.net_arp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = net_arp_process &rArr; net_sys_resume &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_resume
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_sender_valid
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[281]"></a>net_atoi</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, net_common.o(i.net_atoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_aton
</UL>

<P><STRONG><a name="[26b]"></a>net_chksum_buf</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, net_common.o(i.net_chksum_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_chksum
</UL>

<P><STRONG><a name="[257]"></a>net_crc_buf</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, net_common.o(i.net_crc_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_crc_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
</UL>

<P><STRONG><a name="[1fb]"></a>net_eth_callback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_eth.o(i.net_eth_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = net_eth_callback &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth0_callback
</UL>

<P><STRONG><a name="[ea]"></a>net_eth_config_mcast</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, net_eth.o(i.net_eth_config_mcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = net_eth_config_mcast &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_collect_mcast
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_if_map
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.net_eth0_if_config)
</UL>
<P><STRONG><a name="[ec]"></a>net_eth_get_option</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, net_eth.o(i.net_eth_get_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_eth_get_option
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_opt_len
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_if_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.netif_getopt_func)
</UL>
<P><STRONG><a name="[ed]"></a>net_eth_iface_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_eth.o(i.net_eth_iface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = net_eth_iface_init &rArr; eth_iface_init &rArr; net_addr4_aton &rArr; net_atoi
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[f4]"></a>net_eth_iface_run</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_eth.o(i.net_eth_iface_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = net_eth_iface_run &rArr; eth_iface_run &rArr; net_tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[eb]"></a>net_eth_output</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, net_eth.o(i.net_eth_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_delay
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_unlock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_lock
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_if_map
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.net_eth0_if_config)
</UL>
<P><STRONG><a name="[e9]"></a>net_eth_send_frame</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, net_eth.o(i.net_eth_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = net_eth_send_frame &rArr; net_eth_output &rArr; eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_subcast
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_to_mac
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_if_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.net_eth0_if_config)
</UL>
<P><STRONG><a name="[29e]"></a>net_icmp_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net_icmp.o(i.net_icmp_init))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_init
</UL>

<P><STRONG><a name="[261]"></a>net_icmp_process</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, net_icmp.o(i.net_icmp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = net_icmp_process &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[295]"></a>net_icmp_send_echo</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, net_icmp.o(i.net_icmp_send_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = net_icmp_send_echo &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offl_hl
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum_buf
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send_req
</UL>

<P><STRONG><a name="[272]"></a>net_if_map_all</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_sys.o(i.net_if_map_all))
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_map_if
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIF_GetOption
</UL>

<P><STRONG><a name="[25c]"></a>net_ip4_chk_frame</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, net_ip4.o(i.net_ip4_chk_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = net_ip4_chk_frame &rArr; ip4_get_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_is_member
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_subcast
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_mtu
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[29a]"></a>net_ip4_chksum</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, net_ip4.o(i.net_ip4_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = net_ip4_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[293]"></a>net_ip4_chksum_buf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_chksum_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_ip4_chksum_buf &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
</UL>

<P><STRONG><a name="[283]"></a>net_ip4_find_route</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, net_ip4.o(i.net_ip4_find_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_ip4_find_route
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_is_onlink
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_find_route
</UL>

<P><STRONG><a name="[29b]"></a>net_ip4_frag_add</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, net_ip4_frag.o(i.net_ip4_frag_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = net_ip4_frag_add &rArr; frag_map_session &rArr; que_free_list &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_free_list
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_map_session
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_reass_frame
</UL>

<P><STRONG><a name="[29c]"></a>net_ip4_frag_get</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, net_ip4_frag.o(i.net_ip4_frag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
</UL>

<P><STRONG><a name="[f0]"></a>net_ip4_frag_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_ip4_frag.o(i.net_ip4_frag_init))
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[f7]"></a>net_ip4_frag_run</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, net_ip4_frag.o(i.net_ip4_frag_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = net_ip4_frag_run &rArr; que_free_list &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_free_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[285]"></a>net_ip4_get_local</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_get_local))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_get_local
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
</UL>

<P><STRONG><a name="[29d]"></a>net_ip4_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_init))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_init
</UL>

<P><STRONG><a name="[287]"></a>net_ip4_is_onlink</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_is_onlink))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_find_route
</UL>

<P><STRONG><a name="[292]"></a>net_ip4_is_subcast</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_is_subcast))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[25f]"></a>net_ip4_reass_frame</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_reass_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = net_ip4_reass_frame &rArr; net_ip4_frag_add &rArr; frag_map_session &rArr; que_free_list &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[294]"></a>net_ip4_send_frame</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, net_ip4.o(i.net_ip4_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_get
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_mtu
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_get_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
</UL>

<P><STRONG><a name="[296]"></a>net_ip4_tx_offl_hl</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, net_ip4.o(i.net_ip4_tx_offl_hl))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
</UL>

<P><STRONG><a name="[ee]"></a>net_loop_iface_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_loopback.o(i.net_loop_iface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_loop_iface_init
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_init
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[f5]"></a>net_loop_iface_run</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, net_loopback.o(i.net_loop_iface_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = net_loop_iface_run &rArr; net_tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[cc]"></a>net_loop_send_frame</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, net_loopback.o(i.net_loop_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = net_loop_send_frame &rArr; net_sys_wakeup &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_loopback.o(.constdata)
</UL>
<P><STRONG><a name="[251]"></a>net_mem_alloc</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, net_mem.o(i.net_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_mem_alloc &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_get_buf
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_get_buf
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_get
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_receive
</UL>

<P><STRONG><a name="[28b]"></a>net_mem_avail</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, net_mem.o(i.net_mem_avail))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
</UL>

<P><STRONG><a name="[24f]"></a>net_mem_free</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, net_mem.o(i.net_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_send
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_acknr
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_send_if
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_get
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_free_list
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_proc_response
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[273]"></a>net_mem_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, net_mem.o(i.net_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_mem_init &rArr; netos_mutex_create
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
</UL>

<P><STRONG><a name="[29f]"></a>net_mem_shrink</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, net_mem.o(i.net_mem_shrink))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_mem_shrink &rArr; mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_unlock
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_send
</UL>

<P><STRONG><a name="[f1]"></a>net_ping_client_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_ping_core.o(i.net_ping_client_init))
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[f8]"></a>net_ping_client_run</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, net_ping_core.o(i.net_ping_client_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = net_ping_client_run &rArr; ping_send_req &rArr; net_icmp_send_echo &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[2a7]"></a>net_rand32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net_sys.o(i.net_rand32))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_proc_tick
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[26e]"></a>net_sys_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_sys_lock &rArr; netos_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_SetOption
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Send
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Listen
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_GetSocket
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Abort
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_Send
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_Open
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_GetSocket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIF_GetOption
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[24d]"></a>net_sys_resume</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = net_sys_resume &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_probe_run
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[ab]"></a>net_sys_tick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = net_sys_tick &rArr; net_sys_wakeup &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.text.netos_timer_create)
</UL>
<P><STRONG><a name="[26f]"></a>net_sys_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_sys_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_SetOption
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Send
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Listen
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_GetSocket
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Abort
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_Send
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_Open
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_GetSocket
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitialize
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netIF_GetOption
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[266]"></a>net_sys_wakeup</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_sys.o(i.net_sys_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = net_sys_wakeup &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Send
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_tick
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_send_frame
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_receive
</UL>

<P><STRONG><a name="[275]"></a>net_tcp_abort</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, net_tcp.o(i.net_tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = net_tcp_abort &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Abort
</UL>

<P><STRONG><a name="[27b]"></a>net_tcp_check_send</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, net_tcp.o(i.net_tcp_check_send))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_SendReady
</UL>

<P><STRONG><a name="[276]"></a>net_tcp_get_buf</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_tcp.o(i.net_tcp_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_tcp_get_buf &rArr; net_mem_alloc &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_GetBuffer
</UL>

<P><STRONG><a name="[277]"></a>net_tcp_get_socket</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, net_tcp.o(i.net_tcp_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_tcp_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_GetSocket
</UL>

<P><STRONG><a name="[278]"></a>net_tcp_get_state</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, net_tcp.o(i.net_tcp_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_GetState
</UL>

<P><STRONG><a name="[279]"></a>net_tcp_listen</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, net_tcp.o(i.net_tcp_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_tcp_listen
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Listen
</UL>

<P><STRONG><a name="[263]"></a>net_tcp_process</STRONG> (Thumb, 1230 bytes, Stack size 56 bytes, net_tcp.o(i.net_tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = net_tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_cwnd
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_dupack
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_acknr
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parse_opt
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[27a]"></a>net_tcp_send</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, net_tcp.o(i.net_tcp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = net_tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_shrink
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Send
</UL>

<P><STRONG><a name="[27c]"></a>net_tcp_set_option</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, net_tcp.o(i.net_tcp_set_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_tcp_set_option
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_SetOption
</UL>

<P><STRONG><a name="[f3]"></a>net_tcp_socket_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net_tcp.o(i.net_tcp_socket_init))
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[f9]"></a>net_tcp_socket_run</STRONG> (Thumb, 696 bytes, Stack size 32 bytes, net_tcp.o(i.net_tcp_socket_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = net_tcp_socket_run &rArr; tcp_que_resend &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_avail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_run)
</UL>
<P><STRONG><a name="[27d]"></a>net_udp_get_buf</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_udp.o(i.net_udp_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = net_udp_get_buf &rArr; net_mem_alloc &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_GetBuffer
</UL>

<P><STRONG><a name="[27e]"></a>net_udp_get_socket</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, net_udp.o(i.net_udp_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_udp_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_GetSocket
</UL>

<P><STRONG><a name="[27f]"></a>net_udp_open</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, net_udp.o(i.net_udp_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_udp_open &rArr; udp_port_in_use
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_port_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_Open
</UL>

<P><STRONG><a name="[260]"></a>net_udp_process</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, net_udp.o(i.net_udp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = net_udp_process &rArr; net_ip4_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_loop_iface_run
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_run
</UL>

<P><STRONG><a name="[280]"></a>net_udp_send_if</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, net_udp.o(i.net_udp_send_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = net_udp_send_if &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_is_unspec
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_get_local
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr_find_route
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offl_hl
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_Send
</UL>

<P><STRONG><a name="[f2]"></a>net_udp_socket_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_udp.o(i.net_udp_socket_init))
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.sys_fn_init)
</UL>
<P><STRONG><a name="[274]"></a>net_xtouc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, net_common.o(i.net_xtouc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_xtouc
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2uc
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netMAC_aton
</UL>

<P><STRONG><a name="[17b]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>

<P><STRONG><a name="[2b2]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>

<P><STRONG><a name="[2e6]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[17a]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>

<P><STRONG><a name="[2b4]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2b3]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
</UL>

<P><STRONG><a name="[2b5]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[102]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[2e7]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[2e8]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[248]"></a>__NVIC_SystemReset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, task.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_cb_func
</UL>

<P><STRONG><a name="[a5]"></a>udp_cb_func</STRONG> (Thumb, 422 bytes, Stack size 72 bytes, task.o(.text.udp_cb_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = udp_cb_func &rArr; netUDP_Send &rArr; net_udp_send_if &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_Send
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_GetBuffer
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.text.app_main_task)
</UL>
<P><STRONG><a name="[a7]"></a>tcp_cb_func</STRONG> (Thumb, 1052 bytes, Stack size 32 bytes, sock.o(.text.tcp_cb_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tcp_cb_func &rArr; netTCP_Abort &rArr; net_tcp_abort &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Abort
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_PushQueue
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock.o(.text.app_sock_task)
</UL>
<P><STRONG><a name="[1f8]"></a>tcp_sock_send</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, sock.o(.text.tcp_sock_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tcp_sock_send &rArr; netTCP_Send &rArr; net_tcp_send &rArr; tcp_send_data &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_SendReady
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_Send
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTCP_GetBuffer
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sock_task
</UL>

<P><STRONG><a name="[a6]"></a>udp_cb_func</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, sock.o(.text.udp_cb_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = udp_cb_func &rArr; netUDP_Send &rArr; net_udp_send_if &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ReplyToQuery
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_Send
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netUDP_GetBuffer
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock.o(.text.app_sock_task)
</UL>
<P><STRONG><a name="[a1]"></a>udp_cb_func</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, idle.o(.text.udp_cb_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udp_cb_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(.text.app_idle_task)
</UL>
<P><STRONG><a name="[dd]"></a>Control</STRONG> (Thumb, 706 bytes, Stack size 40 bytes, eth_stm32h7.o(.text.Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Control &rArr; HAL_ETH_SetMACConfig &rArr; ETH_SetMACConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Stop_IT
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start_IT
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetRxVLANIdentifier
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMACFilterConfig
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMACConfig
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetMACFilterConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetMACConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[dc]"></a>ControlTimer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, eth_stm32h7.o(.text.ControlTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ControlTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[d0]"></a>GetCapabilities</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, eth_stm32h7.o(.text.GetCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetCapabilities
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[d4]"></a>GetMacAddress</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, eth_stm32h7.o(.text.GetMacAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetMacAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[d9]"></a>GetRxFrameSize</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, eth_stm32h7.o(.text.GetRxFrameSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GetRxFrameSize &rArr; HAL_ETH_GetRxDataBuffer &rArr; HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetRxDataLength
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetRxDataBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[da]"></a>GetRxFrameTime</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, eth_stm32h7.o(.text.GetRxFrameTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetRxFrameTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[db]"></a>GetTxFrameTime</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, eth_stm32h7.o(.text.GetTxFrameTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetTxFrameTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[cf]"></a>GetVersion</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, eth_stm32h7.o(.text.GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[d1]"></a>Initialize</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, eth_stm32h7.o(.text.Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[de]"></a>PHY_Read</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, eth_stm32h7.o(.text.PHY_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PHY_Read &rArr; HAL_ETH_ReadPHYRegister &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[df]"></a>PHY_Write</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, eth_stm32h7.o(.text.PHY_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PHY_Write &rArr; HAL_ETH_WritePHYRegister &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[d3]"></a>PowerControl</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, eth_stm32h7.o(.text.PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = PowerControl &rArr; HAL_ETH_Init &rArr; ETH_MACDMAConfig &rArr; ETH_SetMACConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_DescAssignMemory
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[d8]"></a>ReadFrame</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, eth_stm32h7.o(.text.ReadFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ReadFrame &rArr; HAL_ETH_BuildRxDescriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_BuildRxDescriptors
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[d7]"></a>SendFrame</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, eth_stm32h7.o(.text.SendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SendFrame &rArr; HAL_ETH_Transmit_IT &rArr; ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Transmit_IT
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[d6]"></a>SetAddressFilter</STRONG> (Thumb, 524 bytes, Stack size 24 bytes, eth_stm32h7.o(.text.SetAddressFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SetAddressFilter &rArr; crc32_data &rArr; crc32_8bit_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[d5]"></a>SetMacAddress</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, eth_stm32h7.o(.text.SetMacAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetMacAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[d2]"></a>Uninitialize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, eth_stm32h7.o(.text.Uninitialize))
<BR>[Address Reference Count : 1]<UL><LI> eth_stm32h7.o(.rodata.Driver_ETH_MAC0)
</UL>
<P><STRONG><a name="[1fa]"></a>crc32_8bit_rev</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, eth_stm32h7.o(.text.crc32_8bit_rev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc32_8bit_rev
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_data
</UL>

<P><STRONG><a name="[1dc]"></a>crc32_data</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, eth_stm32h7.o(.text.crc32_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = crc32_data &rArr; crc32_8bit_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_8bit_rev
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAddressFilter
</UL>

<P><STRONG><a name="[1c7]"></a>MODBUS_ForceMultipleCoils</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, modbus.o(.text.MODBUS_ForceMultipleCoils))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MODBUS_ForceMultipleCoils &rArr; MODBUS_SetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ReplyToQuery
</UL>

<P><STRONG><a name="[1c9]"></a>MODBUS_ForceSingleCoil</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, modbus.o(.text.MODBUS_ForceSingleCoil))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MODBUS_ForceSingleCoil &rArr; MODBUS_SetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ReplyToQuery
</UL>

<P><STRONG><a name="[1ca]"></a>MODBUS_PresetMultipleRegisters</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, modbus.o(.text.MODBUS_PresetMultipleRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MODBUS_PresetMultipleRegisters &rArr; MODBUS_SetRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SetRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ReplyToQuery
</UL>

<P><STRONG><a name="[1cc]"></a>MODBUS_PresetSingleRegister</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, modbus.o(.text.MODBUS_PresetSingleRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MODBUS_PresetSingleRegister &rArr; MODBUS_SetRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SetRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ReplyToQuery
</UL>

<P><STRONG><a name="[1cd]"></a>MODBUS_ReadCoilStatus</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, modbus.o(.text.MODBUS_ReadCoilStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MODBUS_ReadCoilStatus &rArr; MODBUS_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ReplyToQuery
</UL>

<P><STRONG><a name="[1cf]"></a>MODBUS_ReadHoldingRegisters</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, modbus.o(.text.MODBUS_ReadHoldingRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MODBUS_ReadHoldingRegisters &rArr; MODBUS_GetRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_GetRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ReplyToQuery
</UL>

<P><STRONG><a name="[1d1]"></a>MODBUS_ReadInputRegisters</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, modbus.o(.text.MODBUS_ReadInputRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MODBUS_ReadInputRegisters &rArr; MODBUS_GetRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_GetRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ReplyToQuery
</UL>

<P><STRONG><a name="[1d2]"></a>MODBUS_ReadInputStatus</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, modbus.o(.text.MODBUS_ReadInputStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MODBUS_ReadInputStatus &rArr; MODBUS_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ReplyToQuery
</UL>

<P><STRONG><a name="[1d4]"></a>__NVIC_SystemReset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, modbus.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_SetRegister
</UL>

<P><STRONG><a name="[145]"></a>EE_FindValidPage</STRONG> (Thumb, 200 bytes, Stack size 12 bytes, eeprom.o(.text.EE_FindValidPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EE_FindValidPage
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable
</UL>

<P><STRONG><a name="[13f]"></a>EE_Format</STRONG> (Thumb, 196 bytes, Stack size 72 bytes, eeprom.o(.text.EE_Format))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = EE_Format &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullyErased
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
</UL>

<P><STRONG><a name="[144]"></a>EE_PageTransfer</STRONG> (Thumb, 486 bytes, Stack size 144 bytes, eeprom.o(.text.EE_PageTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = EE_PageTransfer &rArr; EE_VerifyPageFullWriteVariable &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_FindValidPage
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable
</UL>

<P><STRONG><a name="[143]"></a>EE_VerifyPageFullWriteVariable</STRONG> (Thumb, 250 bytes, Stack size 96 bytes, eeprom.o(.text.EE_VerifyPageFullWriteVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = EE_VerifyPageFullWriteVariable &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick &rArr; __aeabi_assert &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_FindValidPage
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
</UL>

<P><STRONG><a name="[140]"></a>EE_VerifyPageFullyErased</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, eeprom.o(.text.EE_VerifyPageFullyErased))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EE_VerifyPageFullyErased
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
</UL>

<P><STRONG><a name="[1fc]"></a>evr_initialize</STRONG> (Thumb, 262 bytes, Stack size 64 bytes, rtx_lib.o(.text.evr_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = evr_initialize &rArr; EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderEnable
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
</UL>

<P><STRONG><a name="[1de]"></a>os_kernel_is_active</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtx_lib.o(.text.os_kernel_is_active), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[e7]"></a>GetLinkInfo</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, phy_lan8742a.o(.text.GetLinkInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetLinkInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
</UL>
<P><STRONG><a name="[e6]"></a>GetLinkState</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, phy_lan8742a.o(.text.GetLinkState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetLinkState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
</UL>
<P><STRONG><a name="[e0]"></a>GetVersion</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, phy_lan8742a.o(.text.GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
</UL>
<P><STRONG><a name="[e1]"></a>Initialize</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, phy_lan8742a.o(.text.Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
</UL>
<P><STRONG><a name="[e3]"></a>PowerControl</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, phy_lan8742a.o(.text.PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
</UL>
<P><STRONG><a name="[e4]"></a>SetInterface</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, phy_lan8742a.o(.text.SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
</UL>
<P><STRONG><a name="[e5]"></a>SetMode</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, phy_lan8742a.o(.text.SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
</UL>
<P><STRONG><a name="[e2]"></a>Uninitialize</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, phy_lan8742a.o(.text.Uninitialize))
<BR>[Address Reference Count : 1]<UL><LI> phy_lan8742a.o(.rodata.Driver_ETH_PHY0)
</UL>
<P><STRONG><a name="[14b]"></a>EventGetTS</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, eventrecorder.o(.text.EventGetTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EventGetTS &rArr; UpdateTS &rArr; atomic_wr32
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTS
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockTS_Overflow
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockTS_Overflow
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[150]"></a>EventRecordItem</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, eventrecorder.o(.text.EventRecordItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockRecord
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockRecord
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsWritten
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsDumped
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecordIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[151]"></a>GetRecordIndex</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.GetRecordIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetRecordIndex &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[155]"></a>IncrementRecordsDumped</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.IncrementRecordsDumped))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IncrementRecordsDumped &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[154]"></a>IncrementRecordsWritten</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.IncrementRecordsWritten))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IncrementRecordsWritten &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[152]"></a>LockRecord</STRONG> (Thumb, 54 bytes, Stack size 28 bytes, eventrecorder.o(.text.LockRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LockRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[14d]"></a>LockTS_Overflow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.LockTS_Overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LockTS_Overflow &rArr; atomic_wr8
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_wr8
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[153]"></a>UnlockRecord</STRONG> (Thumb, 50 bytes, Stack size 28 bytes, eventrecorder.o(.text.UnlockRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UnlockRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[14e]"></a>UnlockTS_Overflow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.UnlockTS_Overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UnlockTS_Overflow &rArr; atomic_wr8
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_wr8
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[14f]"></a>UpdateTS</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, eventrecorder.o(.text.UpdateTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UpdateTS &rArr; atomic_wr32
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_wr32
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[169]"></a>atomic_inc32</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, eventrecorder.o(.text.atomic_inc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsWritten
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsDumped
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecordIndex
</UL>

<P><STRONG><a name="[1dd]"></a>atomic_wr32</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, eventrecorder.o(.text.atomic_wr32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_wr32
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTS
</UL>

<P><STRONG><a name="[1c6]"></a>atomic_wr8</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, eventrecorder.o(.text.atomic_wr8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_wr8
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockTS_Overflow
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockTS_Overflow
</UL>

<P><STRONG><a name="[158]"></a>crc16_ccitt</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, eventrecorder.o(.text.crc16_ccitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[124]"></a>LL_ADC_Disable</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>

<P><STRONG><a name="[17e]"></a>LL_ADC_DisableDeepPowerDown</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_DisableDeepPowerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_DisableDeepPowerDown
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[127]"></a>LL_ADC_Enable</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[180]"></a>LL_ADC_EnableInternalRegulator</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_EnableInternalRegulator))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_EnableInternalRegulator
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[177]"></a>LL_ADC_GetCommonPathInternalCh</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_GetCommonPathInternalCh))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_GetCommonPathInternalCh
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[128]"></a>LL_ADC_GetMultimode</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_GetMultimode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_GetMultimode
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[16e]"></a>LL_ADC_GetResolution</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_GetResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_GetResolution
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[171]"></a>LL_ADC_INJ_IsConversionOngoing</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_INJ_IsConversionOngoing))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_INJ_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[17d]"></a>LL_ADC_IsDeepPowerDownEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_IsDeepPowerDownEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsDeepPowerDownEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[122]"></a>LL_ADC_IsDisableOngoing</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_IsDisableOngoing))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsDisableOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>

<P><STRONG><a name="[123]"></a>LL_ADC_IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>

<P><STRONG><a name="[17f]"></a>LL_ADC_IsInternalRegulatorEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_IsInternalRegulatorEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsInternalRegulatorEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[16f]"></a>LL_ADC_REG_IsConversionOngoing</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_REG_IsConversionOngoing))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_REG_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[11d]"></a>LL_ADC_REG_IsTriggerSourceSWStart</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_REG_IsTriggerSourceSWStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_REG_IsTriggerSourceSWStart
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[187]"></a>LL_ADC_REG_SetDataTransferMode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_REG_SetDataTransferMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_REG_SetDataTransferMode
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[170]"></a>LL_ADC_REG_SetSequencerRanks</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_REG_SetSequencerRanks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[189]"></a>LL_ADC_REG_StartConversion</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_REG_StartConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_REG_StartConversion
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[172]"></a>LL_ADC_SetChannelSamplingTime</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_SetChannelSamplingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[176]"></a>LL_ADC_SetChannelSingleDiff</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_SetChannelSingleDiff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_ADC_SetChannelSingleDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[181]"></a>LL_ADC_SetCommonClock</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_SetCommonClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetCommonClock
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[178]"></a>LL_ADC_SetCommonPathInternalCh</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_SetCommonPathInternalCh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetCommonPathInternalCh
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[175]"></a>LL_ADC_SetDataRightShift</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_SetDataRightShift))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_ADC_SetDataRightShift
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[173]"></a>LL_ADC_SetOffset</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_SetOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_ADC_SetOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[174]"></a>LL_ADC_SetOffsetSignedSaturation</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_SetOffsetSignedSaturation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_SetOffsetSignedSaturation
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[16d]"></a>LL_ADC_IsCalibrationOnGoing</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm32h7xx_hal_adc_ex.o(.text.LL_ADC_IsCalibrationOnGoing))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsCalibrationOnGoing
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[16c]"></a>LL_ADC_StartCalibration</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, stm32h7xx_hal_adc_ex.o(.text.LL_ADC_StartCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_ADC_StartCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[1b3]"></a>NVIC_EncodePriority</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32h7xx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[1b0]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[1b1]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[1b2]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[1b4]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[1b5]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[18b]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 458 bytes, Stack size 12 bytes, stm32h7xx_hal_dma.o(.text.DMA_CalcBaseAndBitshift))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>

<P><STRONG><a name="[18c]"></a>DMA_CalcDMAMUXChannelBaseAndMask</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, stm32h7xx_hal_dma.o(.text.DMA_CalcDMAMUXChannelBaseAndMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>

<P><STRONG><a name="[18d]"></a>DMA_CalcDMAMUXRequestGenBaseAndMask</STRONG> (Thumb, 298 bytes, Stack size 12 bytes, stm32h7xx_hal_dma.o(.text.DMA_CalcDMAMUXRequestGenBaseAndMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_CalcDMAMUXRequestGenBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>

<P><STRONG><a name="[18e]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 240 bytes, Stack size 20 bytes, stm32h7xx_hal_dma.o(.text.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[18f]"></a>DMA_SetConfig</STRONG> (Thumb, 1300 bytes, Stack size 36 bytes, stm32h7xx_hal_dma.o(.text.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[19f]"></a>ETH_DMARxDescListInit</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, stm32h7xx_hal_eth.o(.text.ETH_DMARxDescListInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_DMARxDescListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[19e]"></a>ETH_DMATxDescListInit</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, stm32h7xx_hal_eth.o(.text.ETH_DMATxDescListInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_DMATxDescListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[147]"></a>ETH_MACDMAConfig</STRONG> (Thumb, 230 bytes, Stack size 160 bytes, stm32h7xx_hal_eth.o(.text.ETH_MACDMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ETH_MACDMAConfig &rArr; ETH_SetMACConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetMACConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[14a]"></a>ETH_MAC_MDIO_ClkConfig</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, stm32h7xx_hal_eth.o(.text.ETH_MAC_MDIO_ClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ETH_MAC_MDIO_ClkConfig &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[1a4]"></a>ETH_Prepare_Tx_Descriptors</STRONG> (Thumb, 1232 bytes, Stack size 48 bytes, stm32h7xx_hal_eth.o(.text.ETH_Prepare_Tx_Descriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ETH_Prepare_Tx_Descriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Transmit_IT
</UL>

<P><STRONG><a name="[149]"></a>ETH_SetDMAConfig</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, stm32h7xx_hal_eth.o(.text.ETH_SetDMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_SetDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
</UL>

<P><STRONG><a name="[148]"></a>ETH_SetMACConfig</STRONG> (Thumb, 468 bytes, Stack size 12 bytes, stm32h7xx_hal_eth.o(.text.ETH_SetMACConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_SetMACConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMACConfig
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
</UL>

<P><STRONG><a name="[167]"></a>FLASH_MassErase</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, stm32h7xx_hal_flash_ex.o(.text.FLASH_MassErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_MassErase &rArr; assert_failed &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[a0]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_DMAAbortOnError &rArr; HAL_UART_ErrorCallback &rArr; assert_failed &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[1be]"></a>UART_EndRxTransfer</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, stm32h7xx_hal_uart.o(.text.UART_EndRxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1c2]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; assert_failed &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>eth0_callback</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, net_config.o(.text.eth0_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = eth0_callback &rArr; net_eth_callback &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net_config.o(.rodata.eth0_ll_config)
</UL>
<P><STRONG><a name="[208]"></a>ms2tick</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, net_config.o(.text.ms2tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ms2tick
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_timer_start
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_flag_wait
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_delay
</UL>

<P><STRONG><a name="[1d5]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[218]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_kernel.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[ad]"></a>svcRtxKernelGetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetState))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetState)
</UL>
<P><STRONG><a name="[ae]"></a>svcRtxKernelGetTickCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetTickCount))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetTickCount)
</UL>
<P><STRONG><a name="[af]"></a>svcRtxKernelGetTickFreq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetTickFreq))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetTickFreq)
</UL>
<P><STRONG><a name="[b0]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, rtx_kernel.o(.text.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxKernelInitialize &rArr; OUTLINED_FUNCTION_0 &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelInitialize)
</UL>
<P><STRONG><a name="[b1]"></a>svcRtxKernelStart</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, rtx_kernel.o(.text.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelStart)
</UL>
<P><STRONG><a name="[23d]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsClear
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
</UL>

<P><STRONG><a name="[243]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsClear
</UL>

<P><STRONG><a name="[234]"></a>ThreadFlagsCheck</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rtx_thread.o(.text.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ThreadFlagsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[230]"></a>osRtxThreadBlock</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[237]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[238]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[22e]"></a>osRtxThreadDestroy</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadDestroy &rArr; osRtxThreadFree &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[22f]"></a>osRtxThreadFree</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
</UL>

<P><STRONG><a name="[232]"></a>osRtxThreadJoinWakeup</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadJoinWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxThreadJoinWakeup &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[22b]"></a>osRtxThreadListRoot</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRoot))
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
</UL>

<P><STRONG><a name="[cb]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[bd]"></a>svcRtxThreadExit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadExit)
</UL>
<P><STRONG><a name="[be]"></a>svcRtxThreadFlagsClear</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rtx_thread.o(.text.svcRtxThreadFlagsClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxThreadFlagsClear
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsClear)
</UL>
<P><STRONG><a name="[bf]"></a>svcRtxThreadFlagsGet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(.text.svcRtxThreadFlagsGet))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsGet)
</UL>
<P><STRONG><a name="[c0]"></a>svcRtxThreadFlagsSet</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxThreadFlagsSet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsSet)
</UL>
<P><STRONG><a name="[c1]"></a>svcRtxThreadFlagsWait</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, rtx_thread.o(.text.svcRtxThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxThreadFlagsWait &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsWait)
</UL>
<P><STRONG><a name="[c2]"></a>svcRtxThreadGetId</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_thread.o(.text.svcRtxThreadGetId))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadGetId)
</UL>
<P><STRONG><a name="[c3]"></a>svcRtxThreadNew</STRONG> (Thumb, 472 bytes, Stack size 48 bytes, rtx_thread.o(.text.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadNew)
</UL>
<P><STRONG><a name="[c4]"></a>svcRtxThreadYield</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcRtxThreadYield &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadYield)
</UL>
<P><STRONG><a name="[ac]"></a>svcRtxDelay</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_delay.o(.text.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(.text.osDelay)
</UL>
<P><STRONG><a name="[23b]"></a>TimerInsert</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rtx_timer.o(.text.TimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[244]"></a>TimerRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_timer.o(.text.TimerRemove))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
</UL>

<P><STRONG><a name="[b9]"></a>osRtxTimerTick</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, rtx_timer.o(.text.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osRtxTimerSetup)
</UL>
<P><STRONG><a name="[c5]"></a>svcRtxTimerNew</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, rtx_timer.o(.text.svcRtxTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = svcRtxTimerNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerNew)
</UL>
<P><STRONG><a name="[c6]"></a>svcRtxTimerStart</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rtx_timer.o(.text.svcRtxTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxTimerStart &rArr; TimerInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRemove
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerStart)
</UL>
<P><STRONG><a name="[b4]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexAcquire)
</UL>
<P><STRONG><a name="[b5]"></a>svcRtxMutexDelete</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexDelete)
</UL>
<P><STRONG><a name="[b6]"></a>svcRtxMutexNew</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexNew)
</UL>
<P><STRONG><a name="[b7]"></a>svcRtxMutexRelease</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexRelease)
</UL>
<P><STRONG><a name="[23c]"></a>SemaphoreTokenIncrement</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.SemaphoreTokenIncrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SemaphoreTokenIncrement
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[c9]"></a>osRtxSemaphorePostProcess</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.osRtxSemaphorePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxSemaphorePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.svcRtxSemaphoreNew)
</UL>
<P><STRONG><a name="[ba]"></a>svcRtxSemaphoreAcquire</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxSemaphoreAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreAcquire)
</UL>
<P><STRONG><a name="[bb]"></a>svcRtxSemaphoreNew</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = svcRtxSemaphoreNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreNew)
</UL>
<P><STRONG><a name="[bc]"></a>svcRtxSemaphoreRelease</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxSemaphoreRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[271]"></a>eth_check_link</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, net_eth.o(i.eth_check_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eth_check_link
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[28e]"></a>eth_if_map</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_eth.o(i.eth_if_map))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_send_frame
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_get_option
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
</UL>

<P><STRONG><a name="[252]"></a>eth_iface_init</STRONG> (Thumb, 486 bytes, Stack size 16 bytes, net_eth.o(i.eth_iface_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = eth_iface_init &rArr; net_addr4_aton &rArr; net_atoi
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_error
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_create
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Notify
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_crc_buf
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_addr4_aton
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netMAC_aton
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_mtu_limit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_init
</UL>

<P><STRONG><a name="[258]"></a>eth_iface_run</STRONG> (Thumb, 458 bytes, Stack size 24 bytes, net_eth.o(i.eth_iface_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = eth_iface_run &rArr; net_tcp_process &rArr; tcp_send_reset &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_igmp_process
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_ReceiveRaw
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Notify
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_process
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_reass_frame
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_process
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_notify
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_iface_run
</UL>

<P><STRONG><a name="[264]"></a>eth_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_eth.o(i.eth_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eth_lock &rArr; netif_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[255]"></a>eth_mtu_limit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, net_eth.o(i.eth_mtu_limit))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_iface_init
</UL>

<P><STRONG><a name="[290]"></a>eth_opt_len</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, net_eth.o(i.eth_opt_len))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_get_option
</UL>

<P><STRONG><a name="[265]"></a>eth_receive</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, net_eth.o(i.eth_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = eth_receive &rArr; net_sys_wakeup &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_wakeup
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[267]"></a>eth_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_eth.o(i.eth_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eth_unlock &rArr; netif_unlock &rArr; osSemaphoreRelease &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_output
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_eth_config_mcast
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netETH_Thread
</UL>

<P><STRONG><a name="[288]"></a>arp_cache_alloc</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, net_arp.o(i.arp_cache_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>

<P><STRONG><a name="[249]"></a>arp_cache_run</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, net_arp.o(i.arp_cache_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = arp_cache_run &rArr; arp_probe_run &rArr; net_sys_resume &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_que_free
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_probe_run
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_run
</UL>

<P><STRONG><a name="[286]"></a>arp_is_cacheable</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, net_arp.o(i.arp_is_cacheable))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>

<P><STRONG><a name="[24a]"></a>arp_probe_run</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, net_arp.o(i.arp_probe_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = arp_probe_run &rArr; net_sys_resume &rArr; netos_flag_set &rArr; osThreadFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_sys_resume
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_run
</UL>

<P><STRONG><a name="[24e]"></a>arp_proc_response</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, net_arp.o(i.arp_proc_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = arp_proc_response &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[24b]"></a>arp_que_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_arp.o(i.arp_que_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = arp_que_free &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_run
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_find
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_add
</UL>

<P><STRONG><a name="[250]"></a>arp_send_reply</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, net_arp.o(i.arp_send_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = arp_send_reply &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[24c]"></a>arp_send_request</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, net_arp.o(i.arp_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = arp_send_request &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_probe_run
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_run
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_notify
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_enqueue
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_cache_early
</UL>

<P><STRONG><a name="[28c]"></a>arp_sender_valid</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, net_arp.o(i.arp_sender_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arp_sender_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_arp_process
</UL>

<P><STRONG><a name="[268]"></a>frag_map_session</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, net_ip4_frag.o(i.frag_map_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = frag_map_session &rArr; que_free_list &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;que_free_list
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
</UL>

<P><STRONG><a name="[269]"></a>que_free_list</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_ip4_frag.o(i.que_free_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = que_free_list &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_run
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_frag_add
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frag_map_session
</UL>

<P><STRONG><a name="[2ae]"></a>udp_port_in_use</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net_udp.o(i.udp_port_in_use))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_port_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_open
</UL>

<P><STRONG><a name="[2a3]"></a>tcp_map_socket</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, net_tcp.o(i.tcp_map_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_map_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[2a6]"></a>tcp_parse_opt</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, net_tcp.o(i.tcp_parse_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_parse_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[2a5]"></a>tcp_proc_acknr</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, net_tcp.o(i.tcp_proc_acknr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_proc_acknr &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[2a4]"></a>tcp_proc_dupack</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_proc_dupack))
<BR><BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_init
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[2ad]"></a>tcp_que_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_que_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcp_que_free &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
</UL>

<P><STRONG><a name="[2ac]"></a>tcp_que_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_que_init))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_proc_dupack
</UL>

<P><STRONG><a name="[2ab]"></a>tcp_que_resend</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, net_tcp.o(i.tcp_que_resend))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tcp_que_resend &rArr; tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
</UL>

<P><STRONG><a name="[2a2]"></a>tcp_send_ctrl</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, net_tcp.o(i.tcp_send_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tcp_send_ctrl &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_abort
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[2aa]"></a>tcp_send_data</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tcp_send_data &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_send
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_resend
</UL>

<P><STRONG><a name="[2a8]"></a>tcp_send_reset</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, net_tcp.o(i.tcp_send_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tcp_send_reset &rArr; tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[2a9]"></a>tcp_set_cwnd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, net_tcp.o(i.tcp_set_cwnd))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[2a1]"></a>tcp_transit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, net_tcp.o(i.tcp_transit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_transit &rArr; tcp_que_free &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_que_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_socket_run
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_abort
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_process
</UL>

<P><STRONG><a name="[2b1]"></a>tcp_write</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, net_tcp.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tcp_write &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_get_local
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chksum
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_tx_offl_hl
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_data
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>

<P><STRONG><a name="[2a0]"></a>ping_send_req</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net_ping_core.o(i.ping_send_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ping_send_req &rArr; net_icmp_send_echo &rArr; net_ip4_send_frame &rArr; net_ip4_frag_get &rArr; net_mem_free &rArr; net_sys_error &rArr; ErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_icmp_send_echo
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ping_client_run
</UL>

<P><STRONG><a name="[297]"></a>sys_map_if</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, net_sys.o(i.sys_map_if))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_if_map_all
</UL>

<P><STRONG><a name="[270]"></a>sys_proc_tick</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, net_sys.o(i.sys_proc_tick))
<BR><BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_rand32
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netCore_Thread
</UL>

<P><STRONG><a name="[21a]"></a>MessageQueueGet</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.MessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[223]"></a>MessageQueuePut</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_msgqueue.o(.text.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[21f]"></a>MessageQueueRemove</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.MessageQueueRemove))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[1d7]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[c8]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; OUTLINED_FUNCTION_0 &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[b2]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueGet)
</UL>
<P><STRONG><a name="[225]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>

<P><STRONG><a name="[b3]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueuePut)
</UL>
<P><STRONG><a name="[26a]"></a>ip4_get_chksum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net_ip4.o(i.ip4_get_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_get_chksum &rArr; net_chksum_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_chksum_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[299]"></a>ip4_get_mtu</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, net_ip4.o(i.ip4_get_mtu))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_send_frame
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ip4_chk_frame
</UL>

<P><STRONG><a name="[26c]"></a>mem_lock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_mem.o(i.mem_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_lock &rArr; netos_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_shrink
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>

<P><STRONG><a name="[26d]"></a>mem_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net_mem.o(i.mem_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_unlock &rArr; netos_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netos_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_shrink
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_mem_alloc
</UL>

<P><STRONG><a name="[28d]"></a>crc32_8bit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, net_common.o(i.crc32_8bit))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_crc_buf
</UL>

<P><STRONG><a name="[2b0]"></a>hex2uc</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, net_common.o(i.hex2uc))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_xtouc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
